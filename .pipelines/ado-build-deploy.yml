# Pipeline to build and deploy the Harmony Badger service.
name: $(BUILD_MAJOR).$(BUILD_MINOR).$(BUILD_BUILD)

# Disable any automatic triggers.
# We will use webhooks called by GitHub to trigger the pipeline.
trigger: none
pr: none

variables:
  BUILD_MAJOR: 1
  BUILD_MINOR: 0
  BUILD_BUILD: $[counter(variables['BUILD_MINOR'], 0)]
  srcDir: '$(Build.SourcesDirectory)/HarmonyBadger/src'
  vmImage: 'ubuntu-latest'
  dropPackageFileName: 'HarmonyBadger_$(Build.BuildId).zip'

resources:
  webhooks:
    - webhook: WebHookTrigger
      connection: WebHook\GitHub\HarmonyBadgerBuildDeploy
      filters:
        - path: ref
          value: refs/heads/main              # Restrict to push events on 'main' branch
  repositories:
    - repository: self                        # The primary repository.
      type: github
      endpoint: GitHub\Solari23
      name: solari23/HarmonyBadger
    - repository: harmony_badger_config       # Private repository containing personal configurations
      type: github
      endpoint: GitHub\Solari23
      name: solari23/HarmonyBadger.Config

stages:
- stage: Build
  displayName: Setup + Build Stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImage)
    steps:
      # Checkout code
      - checkout: self
        displayName: 'Checkout Primary Repo'

      - checkout: harmony_badger_config
        displayName: 'Checkout Private Config Repo'

      - script: cp $(Build.SourcesDirectory)/HarmonyBadger.Config/appsettings.Production.json $(srcDir)/HarmonyBadger
        displayName: 'Copy Production AppSettings'

      # Copy configurations from the private repo into the corresponding locations in the primary repo.
      - script: cp $(Build.SourcesDirectory)/HarmonyBadger.Config/TaskConfigs/* $(srcDir)/TaskConfigs
        displayName: 'Copy Private Configs'

      # Print the repo structure for debugging.
      - script: tree $(Build.SourcesDirectory)
        displayName: Print Directory Tree

      # Run the build.
      - task: DotNetCoreCLI@2
        displayName: Core Build
        inputs:
          command: 'build'
          projects: |
            $(srcDir)/**/*.csproj
          arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

      # Zip the build outputs. This zip is the 'package' that gets deployed.
      - task: ArchiveFiles@2
        displayName: 'Create Azure Function Zip Package'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(dropPackageFileName)
          replaceExistingArchive: true

      - publish: $(Build.ArtifactStagingDirectory)/$(dropPackageFileName)
        artifact: drop

- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'HarmonyBadger-Prod'
    pool:
      vmImage: $(vmImage)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function'
            inputs:
              azureSubscription: Alker_Dev\HarmonyBadger
              appType: 'functionAppLinux'
              appName: HarmonyBadger
              package: '$(Pipeline.Workspace)/drop/$(dropPackageFileName)'